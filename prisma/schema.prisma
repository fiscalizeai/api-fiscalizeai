// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
  SECRETARY
}

enum Permission {
  ACCEPTED
  DENIED
}

model User {
  id         String     @id() @default(uuid())
  name       String
  email      String     @unique
  password   String
  cpf        String     @unique
  created_at DateTime   @default(now())
  permission Permission @default(ACCEPTED)
  role       Role       @default(MEMBER)

  education_records Education[]
  health_records    Health[]
  transport_records Transport[]
  person_records    Person[]

  chamber    Chamber @relation(fields: [chamber_id], references: [id])
  chamber_id String

  @@map("users")
}

model Chamber {
  id         String   @id() @default(cuid())
  name       String
  state      String
  created_at DateTime @default(now())

  users             User[]
  education_records Education[]
  person_records    Person[]
  health_records    Health[]
  transport_records Transport[]

  @@map("chambers")
}

model Education {
  id       String @id @default(uuid())
  schools  Int
  students Int
  teachers Int
  total    Int

  month      DateTime
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  chamber    Chamber @relation(fields: [chamber_id], references: [id])
  chamber_id String

  @@map("education_data")
}

model Person {
  id          String @id @default(uuid())
  staffs      Int
  contractors Int
  headcounts  Int
  total       Int

  month      DateTime
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  chamber    Chamber @relation(fields: [chamber_id], references: [id])
  chamber_id String

  @@map("person_data")
}

model Health {
  id String @id @default(uuid())

  services Int
  doctors  Int
  total    Int

  month      DateTime
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  chamber    Chamber @relation(fields: [chamber_id], references: [id])
  chamber_id String

  @@map("health_data")
}

model Transport {
  id String @id @default(uuid())

  cars     Int
  bus      Int
  machines Int
  total    Int

  month      DateTime
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  chamber    Chamber @relation(fields: [chamber_id], references: [id])
  chamber_id String
}
