// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
  SECRETARY
}

enum Status {
  ACCEPTED
  DENIED
}

model User {
  id         String   @id() @default(uuid())
  name       String
  email      String   @unique
  password   String
  cpf        String   @unique
  created_at DateTime @default(now())
  status     Status   @default(ACCEPTED)
  role       Role     @default(MEMBER)

  education_records Education[]
  health_records    Health[]
  transport_records Transport[]
  chamber_records   Chamber[]

  city    City      @relation(fields: [city_id], references: [id])
  city_id String
  Finance Finance[]

  @@map("users")
}

model City {
  id         String   @id() @default(cuid())
  name       String
  state      String
  created_at DateTime @default(now())

  users User[]

  education_records Education[]
  chamber_records   Chamber[]
  health_records    Health[]
  transport_records Transport[]
  Finance           Finance[]

  transfer      Transfer[]
  totalTransfer TotalTransfer[]

  @@map("cities")
}

model Education {
  id       String  @id @default(uuid())
  schools  Int
  students Int
  teachers Int
  total    Decimal

  month      Int
  year       Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  city    City   @relation(fields: [city_id], references: [id])
  city_id String

  @@map("education_data")
}

model Chamber {
  id          String  @id @default(uuid())
  staffs      Int
  contractors Int
  headcounts  Int
  total       Decimal

  month      Int
  year       Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  city    City   @relation(fields: [city_id], references: [id])
  city_id String

  @@map("chamber_data")
}

model Health {
  id String @id @default(uuid())

  services Int
  doctors  Int
  total    Decimal

  month      Int
  year       Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  city    City   @relation(fields: [city_id], references: [id])
  city_id String

  @@map("health_data")
}

model Finance {
  id String @id @default(uuid())

  iptu Int
  iss  Int
  itbi Int

  month      Int
  year       Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  city    City   @relation(fields: [city_id], references: [id])
  city_id String

  @@map("finances_data")
}

model Transport {
  id String @id @default(uuid())

  cars     Int
  bus      Int
  machines Int
  total    Decimal

  month      Int
  year       Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  city    City   @relation(fields: [city_id], references: [id])
  city_id String

  @@map("transport_data")
}

model Parcel {
  id         String   @id @default(uuid())
  parcel     String
  value      String
  date       DateTime
  created_at DateTime @default(now())

  transfer    Transfer @relation(fields: [transfer_id], references: [id])
  transfer_id String

  @@map("parcels")
}

model Transfer {
  id            String   @id @default(uuid())
  file          String
  demonstrative String
  created_at    DateTime @default(now())

  parcel  Parcel[]
  city    City     @relation(fields: [city_id], references: [id])
  city_id String

  @@map("transfers")
}

model TotalTransfer {
  id    String @id @default(uuid())
  month Int
  year  Int
  value String

  city    City   @relation(fields: [city_id], references: [id])
  city_id String

  @@map("total_transfers")
}
